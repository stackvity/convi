# .golangci.yml

# Refer to https://golangci-lint.run/usage/configuration/ for details

run:
  # Timeout for analysis, e.g. 3 minutes. Default is 1 minute.
  timeout: 5m
  # Default is true. Enables skipping of directories:
  #   vendor$, third_party$, testdata$, examples$, Godeps$, builtin$
  skip-dirs-use-default: true
  # Which dirs to skip: issues from them won't be reported.
  # Can be useful for autogenerated files or code that awaits refactoring.
  # Information about format is here: https://golangci-lint.run/usage/configuration/#paths-configuration
  skip-dirs:
    - internal/mocks # Example: If you have a mocks directory

  # Which files to skip: they will be analyzed, but issues from them won't be reported.
  # Default is empty list. Information about format is here: https://golangci-lint.run/usage/configuration/#paths-configuration
  skip-files:
    - ".*_test\\.go" # Often beneficial to relax rules slightly in tests

  # By default, analysis is not run concurrently.
  # Recommended to set this to the number of CPU cores available.
  # concurrency: 4 # Explicitly set if needed, default is fine often

  # include-test-files: false # Analyze test files? Default is false. Set to true if needed.

linters-settings:
  errcheck:
    # Report about not checking of errors in type assertions: `a := b.(MyStruct)`.
    # Such cases aren't reported by default.
    # Default: false
    check-type-assertions: true
    # Report about assignment of errors to blank identifier: `num, _ := strconv.Atoi(numStr)`.
    # Such cases aren't reported by default.
    # Default: false
    check-blank: true

  govet:
    # Enable all analyzers.
    # Default: false
    enable-all: true
    # Disable specific analyzers by name.
    # Run `go tool vet help` to see all analyzers.
    # Default: []
    disable:
      - fieldalignment # Often too noisy, can be enabled later if desired
      - shadow # Can be useful but sometimes generates false positives in idiomatic Go code
    # Options per analyzer: https://golang.org/cmd/vet/#flags
    # settings:
    #   printf: # Analyzer name.
    #     funcs: # Run `printf` analyzer on calls of any functions from this list.
    #       - (github.com/golangci/golangci-lint/pkg/logutils.Log).Infof
    #       - (github.com/golangci/golangci-lint/pkg/logutils.Log).Warnf
    #       - (github.com/golangci/golangci-lint/pkg/logutils.Log).Errorf
    #       - (github.com/golangci/golangci-lint/pkg/logutils.Log).Fatalf

  gocyclo:
    # Minimum code complexity to report.
    # Default: 10
    min-complexity: 15 # Slightly higher threshold initially

  maligned:
    # Suggest new types/fields alignment.
    # Default: false
    suggest-new: true

  dupl:
    # Threshold for duplication.
    # Default: 100
    threshold: 150 # Slightly more permissive initially

  goconst:
    # Minimum length of string constant.
    # Default: 3
    min-len: 3
    # Minimum occurrences of constant string count to trigger issue.
    # Default: 3
    min-occurrences: 3

  misspell:
    # Correct spellings using locale preferences.
    # Supported locales are: 'US', 'UK'.
    # Default is 'US'.
    locale: US
    # List of ignored words.
    ignore-words: []

  lll:
    # Max line length, lines longer will be reported.
    # Default is 120.
    line-length: 120
    # Tab width in spaces.
    # Default: 1
    tab-width: 4

  unused:
    # Report arguments of functions that are not used.
    # Default: true
    check-exported: false # Don't warn about unused exported functions initially

  unparam:
    # Inspect exported functions, default is false.
    check-exported: false

  nakedret:
    # Make an issue if func has more lines of code than this setting.
    # Default is 30.
    max-func-lines: 30

  prealloc:
    # Report preallocation suggestions only on simple loops (`for _, ` for `range`).
    # Default: true
    simple: true
    # Report preallocation suggestions on slice range loops.
    # Default: false
    range-loops: true
    # Report preallocation suggestions on simple for loops.
    # Default: false
    for-loops: false

  gocritic:
    # Which checks to enable; default is matching golangci-lint's behavior. https://go-critic.github.io/overview.html
    enabled-tags:
      - diagnostic
      - experimental # Maybe disable initially if too noisy
      - opinionated
      - performance
      - style
    # Which checks to disable.
    # disabled-checks:
    #   - commentedOutCode

linters:
  # Disable all linters by default and explicitly enable specific ones.
  # Or, enable specific ones and disable others if you prefer the default set.
  # Default is false. Set 'disable-all' to true if you want to enable only specific linters.
  disable-all: false
  # Enable specific linters.
  enable:
    - bodyclose
    - dogsled
    - dupl
    - errcheck
    - exportloopref
    - exhaustive # Check exhaustiveness of switch statements
    - goconst
    - gocritic
    - gocyclo
    - gofmt
    - goimports
    - gosimple
    - govet
    - ineffassign
    - lll
    - misspell
    - nakedret
    - noctx # Checks for context passed where not needed, or missing where needed
    - prealloc
    - revive # Replaces golint
    - staticcheck
    - stylecheck
    - typecheck
    - unconvert
    - unparam
    - unused
    - whitespace
    # Consider adding more linters gradually:
    # - gosec (Security checks)
    # - makezero (Checks for slices/maps created with non-zero length)
    # - nestif (Checks for deeply nested if statements)
    # - nolintlint (Checks for unused nolint directives)
    # - wastedassign (Checks for assignments that are never used)
    # - wrapcheck (Checks for errors that are not wrapped)

  # Disable specific linters. Add linters here if they are part of the default enabled set
  # but cause too much noise or are not desired for the project.
  disable:
    # - goerr113 # Example: disable if error wrapping style conflicts
    # - testpackage # Example: if tests are structured differently

  # Linters that need to be installed. Will be installed by `make install-deps`.
  # Golangci-lint manages installation internally if not present.
  # custom:

issues:
  # Maximum issues count per one linter. Set to 0 to disable. Default is 50.
  max-issues-per-linter: 0
  # Maximum count of issues with the same text. Set to 0 to disable. Default is 3.
  max-same-issues: 10

  # Exclude specific issues by text.
  exclude:
    # Example: Ignore specific error messages if unavoidable
    # - "Error return value of `(.*)` is not checked" # Use regex

  # Exclude issues in specific files or functions using regexp.
  exclude-rules:
    # Example: Exclude some linters from running on tests (alternative to skip-files)
    # - path: _test\.go
    #   linters:
    #     - gocyclo
    #     - errcheck
    #     - dupl
    #     - gosec
    - path: internal/filesystem/mock_filesystem.go
      linters:
        - dupl # Mock implementation might have unavoidable duplication


  # Independently exclude directories from analysis by specific linters.
  # exclude-dirs:
  #   - path: pkg/legacy
  #     linters: [revive, stylecheck]

  # Show only new issues created after git merge-base
  # new-from-rev: "" # Specify git revision here

  # Show only new issues created in changed code lines compared to the base branch
  # new-from-patch: "" # Specify patch file here

  # Exclude configuration for 'nolintlint'.
  # nolintlint:
  #   allow-unused: false # Report unused nolint directives.
  #   allow-leading-space: true # Allow spaces before 'nolint'.
  #   allow-no-explanation: false # Require explanations for 'nolint'.
  #   require-explanation: true # Require explanations for 'nolint'.
  #   require-specific: true # Require specific linter names in 'nolint' directives.
